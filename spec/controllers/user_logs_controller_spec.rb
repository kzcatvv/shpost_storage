require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UserLogsController do

  # This should return the minimal set of attributes required to create a valid
  # UserLog. As you add validations to UserLog, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {} }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UserLogsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "admin access" do
    before :each do 
      @user_log1 = FactoryGirl.create(:user_log)
      @user_log2 = FactoryGirl.create(:user_log)
      @user_log3 = FactoryGirl.create(:user_log)

       @user = FactoryGirl.create(:superadmin)
      #@user = User.first
      
      sign_in @user
    end

    describe "GET index" do
      it "assigns all user_logs as @user_logs" do
        get :index
        expect(assigns(:user_logs)).to eq([@user_log1, @user_log2, @user_log3])
      end

      it "renders the index view" do
        get :index
        expect(response).to render_template :index
      end
    end

    describe "GET show" do
      it "assigns the requested user_log as @user_log" do
        get :show, id: @user_log1
        expect(assigns(:user_log)).to eq(@user_log1)
      end

      it "renders the show view" do
        get :show, id: @user_log1
        expect(response).to render_template :show
      end
    end
  end
end
