require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UsersController do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {  } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  shared_examples("user/admin access to users") do
    describe "GET index" do
      it "assigns all users as @users" do
        get :index
        expect(assigns(:users)).to eq([@user, @superadmin, @unitadmin])
      end

      it "renders the index view" do
        get :index
        expect(response).to render_template :index
      end
    end

    describe "GET show" do
      it "assigns the requested user as @user" do
        get :show, id: @user
        expect(assigns(:user)).to eq(@user)
      end

      it "renders the show view" do
        get :show, id: @user
        expect(response).to render_template :show
      end
    end

    describe "GET new" do
      it "assigns a new user as @user" do
        get :new
        expect(assigns(:user)).to be_a_new(User)
      end

      it "renders the new view" do
        get :new
        expect(response).to render_template :new
      end
    end

    describe "GET edit" do
      it "assigns the requested user as @user" do
        get :edit, id: @user
        expect(assigns(:user)).to eq(@user)
      end

      it "renders the edit view" do
        get :edit, id: @user
        expect(response).to render_template :edit
      end
    end

    describe "POST create" do
      context "with valid params" do
        it "creates a new User" do
            expect { post :create, user: FactoryGirl.attributes_for(:new_user) }.to change(User, :count).by(1)
        end

        it "assigns a newly created user as @user" do
          post :create, user: FactoryGirl.attributes_for(:new_user)
          expect(assigns(:user)).to be_a(User)
          expect(assigns(:user)).to be_persisted
        end

        it "redirects to the created user" do
          post :create, user: FactoryGirl.attributes_for(:new_user)
          expect(response).to redirect_to(User.last)
        end

        it "creates a new UserLog with creating user" do
          expect { post :create, user: FactoryGirl.attributes_for(:new_user)}.to change(UserLog, :count).by(1)
        end

        it "assigns a newly created user_log as @user_log with creating user" do
          post :create, user: FactoryGirl.attributes_for(:new_user)

          expect(assigns(:user_log)).to be_a(UserLog)
          expect(assigns(:user_log)).to be_persisted
          expect(assigns(:user_log).object_class).to eq 'User'
          expect(assigns(:user_log).object_primary_key).to eq assigns(:user).id
          expect(assigns(:user_log).operation).to eq '新增用户管理'
        end
      end

      context "with invalid params" do
        it "assigns a newly created but unsaved user as @user" do
          expect{post :create, user: FactoryGirl.attributes_for(:invalid_user)}.to_not change(User, :count)
        end

        it "assigns a newly created but unsaved user as @user not created user_log" do
          expect {post :create, user: FactoryGirl.attributes_for(:invalid_user)}.to_not change(UserLog, :count)
        end

        it "re-renders the 'new' template" do
          post :create, user: FactoryGirl.attributes_for(:invalid_user)
          expect(response).to render_template :new
        end
      end
    end

    describe "PATCH update" do
      context "with valid params" do
        it "locates the requested @user" do
          patch :update, id: @user, user: FactoryGirl.attributes_for(:update_user)
          expect(assigns(:user)).to eq @user
        end

        it "changes @user's attributes" do
          patch :update, id: @user, user: FactoryGirl.attributes_for(:update_user)
          @user.reload
          expect(@user.username).to eq("update_username_test")
          expect(@user.name).to eq("update_name")
          expect(@user.email).to eq("update_user@example.com")
        end

        it "redirects to the user" do
          patch :update, id: @user, user: FactoryGirl.attributes_for(:user)
          expect(response).to redirect_to @user
        end
      end

      context "with invalid params" do
        it "does not change the user's attributes" do
          put :update, id: @user, user: FactoryGirl.attributes_for(:invalid_user)
          @user.reload
          expect(@user.name).to_not eq("invalid_n")
          expect(@user.name).to eq("name")
        end

        it "re-renders the 'edit' template" do
          put :update, id: @user, user: FactoryGirl.attributes_for(:invalid_user)
          expect(response).to render_template("edit")
        end
      end
    end

    describe "DELETE destroy" do

      it "destroys the requested user" do
        expect {
          delete :destroy, id: @user
        }.to change(User, :count).by(-1)
      end

      it "redirects to the users list" do
        delete :destroy, id: @user
        expect(response).to redirect_to(users_url)
      end

      it "assigns a newly created user_log as @user_log with destroying user" do
        expect {
          delete :destroy, id: @user
        }.to change(UserLog, :count).by(1)
        expect(assigns(:user_log)).to be_a(UserLog)
        expect(assigns(:user_log)).to be_persisted
        expect(assigns(:user_log).object_class).to eq 'User'
        expect(assigns(:user_log).object_primary_key).to eq assigns(:user).id
        expect(assigns(:user_log).operation).to eq '删除用户管理'
      end
    end
  end

  shared_examples("guest access to users") do
    describe "GET index" do
      it "should login" do
        get :index
        expect(response).to redirect_to "/users/sign_in"
      end
    end

    describe "GET show" do
      it "should login" do
        get :show, id: @user
        expect(response).to redirect_to "/users/sign_in"
      end
    end

    describe "GET new" do
      it "should login" do
        get :new
        expect(response).to redirect_to "/users/sign_in"
      end
    end

    describe "GET edit" do
      it "should login" do
        get :edit, id: @user
        expect(response).to redirect_to "/users/sign_in"
      end
    end

    describe "POST create" do
        it "should login" do
          post :create, user: FactoryGirl.attributes_for(:new_user)
          expect(response).to redirect_to "/users/sign_in"
        end
    end

    describe "PATCH update" do
        it "should login" do
          patch :update, id: @user, user: FactoryGirl.attributes_for(:user)
          expect(response).to redirect_to "/users/sign_in"
        end
    end

    describe "DELETE destroy" do
      it "should login" do
        delete :destroy, id: @user
        expect(response).to redirect_to "/users/sign_in"
      end
    end
  end

  describe "admin access" do
    before :each do 
      User.destroy_all
      FactoryGirl.create(:unit)
      @user = FactoryGirl.create(:user)
      @superadmin = FactoryGirl.create(:superadmin)
      @unitadmin = FactoryGirl.create(:unitadmin)
      sign_in @superadmin
    end

    it_behaves_like "user/admin access to users"
    
  end

  describe "guess access" do
    before :each do 
      FactoryGirl.create(:unit)
      @user = FactoryGirl.create(:user)
      @superadmin = FactoryGirl.create(:superadmin)
      @unitadmin = FactoryGirl.create(:unitadmin)
    end

    it_behaves_like "guest access to users"
  end
end
