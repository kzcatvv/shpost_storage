require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SuppliersController do

  # This should return the minimal set of attributes required to create a valid
  # Supplier. As you add validations to Supplier, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {  } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SuppliersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  
  shared_examples("supplier/test to suppliers") do
      
    describe "GET index" do
      # it "assigns all suppliers as @suppliers" do
      #   get :index
      #   expect(assigns(:suppliers)).to eq([@supplier])
      # end

      it "renders the index view" do
        get :index
        expect(response).to render_template :index
      end
    end

    describe "GET show" do
      it "assigns the requested supplier as @supplier" do
        get :show, id: @supplier
        expect(assigns(:supplier)).to eq(@supplier)
      end

      it "renders the show view" do
        get :show, id: @supplier
        expect(response).to render_template :show
      end
    end

    describe "GET new" do
      it "assigns a new supplier as @supplier" do
        get :new
        expect(assigns(:supplier)).to be_a_new(Supplier)
      end

      it "renders the new view" do
        get :new
        expect(response).to render_template :new
      end
    end

    describe "GET edit" do
      it "assigns the requested supplier as @supplier" do
        get :edit, id: @supplier
        expect(assigns(:supplier)).to eq(@supplier)
      end

      it "renders the edit view" do
        get :edit, id: @supplier
        expect(response).to render_template :edit
      end
    end

    describe "POST create" do
      context "with valid params" do
        it "creates a new supplier" do
            expect { post :create, supplier: FactoryGirl.attributes_for(:new_supplier) }.to change(Supplier, :count).by(1)
        end

        it "assigns a newly created supplier as @supplier" do
          post :create, supplier: FactoryGirl.attributes_for(:new_supplier)
          expect(assigns(:supplier)).to be_a(Supplier)
          expect(assigns(:supplier)).to be_persisted
        end

        it "redirects to the created supplier" do
          post :create, supplier: FactoryGirl.attributes_for(:new_supplier)
          expect(response).to redirect_to(Supplier.last)
        end
      end

      context "with invalid params" do
        it "assigns a newly created but unsaved supplier as @supplier" do
          expect{post :create, supplier: FactoryGirl.attributes_for(:invalid_supplier)}.to_not change(Supplier, :count)
        end

        it "re-renders the 'new' template" do
          post :create, supplier: FactoryGirl.attributes_for(:invalid_supplier)
          expect(response).to render_template :new
        end
      end
    end

    describe "PATCH update" do
      context "with valid params" do
        it "locates the requested @supplier" do
          patch :update, id: @supplier, supplier: FactoryGirl.attributes_for(:update_supplier)
          expect(assigns(:supplier)).to eq @supplier
        end

        it "changes @supplier's attributes" do
          patch :update, id: @supplier, supplier: FactoryGirl.attributes_for(:update_supplier)
          @supplier.reload
          expect(@supplier.name).to eq("update")
          expect(@supplier.sno).to eq("update")
          #expect(@supplier.email).to eq("update")
        end

        it "redirects to the supplier" do
          patch :update, id: @supplier, supplier: FactoryGirl.attributes_for(:supplier)
          expect(response).to redirect_to @supplier
        end
      end

      context "with invalid params" do
        it "does not change the supplier's attributes" do
          put :update, id: @supplier, supplier: FactoryGirl.attributes_for(:invalid_supplier)
          @supplier.reload
          expect(@supplier.name).to_not eq("invalid")
          expect(@supplier.name).to eq("test")
        end

        it "re-renders the 'edit' template" do
          put :update, id: @supplier, supplier: FactoryGirl.attributes_for(:invalid_supplier)
          expect(response).to render_template("edit")
        end
      end
    end

    describe "DELETE destroy" do

      it "destroys the requested supplier" do
        expect {
          delete :destroy, id: @supplier
        }.to change(Supplier, :count).by(-1)
      end

      it "redirects to the suppliers list" do
        delete :destroy, id: @supplier
        expect(response).to redirect_to(suppliers_url)
      end
    end
  end
  describe "test" do
    before :each do 
      FactoryGirl.create(:unit)
      @supplier = FactoryGirl.create(:supplier)
      @user = FactoryGirl.create(:user)
      @superadmin = FactoryGirl.create(:superadmin)
      @unitadmin = FactoryGirl.create(:unitadmin)
      sign_in @superadmin
      puts @supplier.unit_id
    end

    it_behaves_like "supplier/test to suppliers"
    
  end
end

  

