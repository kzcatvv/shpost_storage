require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe AreasController do

  # This should return the minimal set of attributes required to create a valid
  # Area. As you add validations to Area, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "storage_id" => "1" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AreasController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  shared_examples("user/admin access to areas") do
    describe "GET index" do
      it "assigns all areas as @areas" do
        get :index
        expect(assigns(:areas)).to eq([@area])
      end

      it "renders the index view" do
        get :index
        expect(response).to render_template :index
      end
    end

    describe "GET show" do
      it "assigns the requested area as @area" do
        get :show, id: @area
        expect(assigns(:area)).to eq(@area)
      end

      it "renders the show view" do
        get :show, id: @area
        expect(response).to render_template :show
      end
    end

    describe "GET new" do
      it "assigns a new area as @area" do
        get :new
        expect(assigns(:area)).to be_a_new(Area)
      end

      it "renders the new view" do
        get :new
        expect(response).to render_template :new
      end
    end

    describe "GET edit" do
      it "assigns the requested area as @area" do
        get :edit, id: @area
        expect(assigns(:area)).to eq(@area)
      end

      it "renders the edit view" do
        get :edit, id: @area
        expect(response).to render_template :edit
      end
    end

    describe "POST create" do
      context "with valid params" do
        it "creates a new Area" do
            expect { post :create, area: FactoryGirl.attributes_for(:new_area) }.to change(Area, :count).by(1)
        end

        it "assigns a newly created area as @area" do
          post :create, area: FactoryGirl.attributes_for(:new_area)
          expect(assigns(:area)).to be_a(Area)
          expect(assigns(:area)).to be_persisted
        end

        it "redirects to the created area" do
          post :create, area: FactoryGirl.attributes_for(:new_area)
          expect(response).to redirect_to(Area.last)
        end
      end

      context "with invalid params" do
        it "assigns a newly created but unsaved area as @area" do
          expect{post :create, area: FactoryGirl.attributes_for(:invalid_area)}.to_not change(Area, :count)
        end

        it "re-renders the 'new' template" do
          post :create, area: FactoryGirl.attributes_for(:invalid_area)
          expect(response).to render_template :new
        end
      end
    end

    describe "PATCH update" do
      context "with valid params" do
        it "locates the requested @user" do
          patch :update, id: @area, area: FactoryGirl.attributes_for(:update_area)
          expect(assigns(:area)).to eq @area
        end

        it "changes @area's attributes" do
          patch :update, id: @area, area: FactoryGirl.attributes_for(:update_area)
          @area.reload
          expect(@area.area_code).to eq("update_area_code")
          expect(@area.desc).to eq("update_desc")
        end

        it "redirects to the area" do
          patch :update, id: @area, area: FactoryGirl.attributes_for(:area)
          expect(response).to redirect_to @area
        end
      end

      context "with invalid params" do
        it "does not change the area's attributes" do
          put :update, id: @area, area: FactoryGirl.attributes_for(:invalid_area)
          @area.reload
          expect(@area.area_code).to_not eq("invalid_a")
          expect(@area.area_code).to eq("area_code")
        end

        it "re-renders the 'edit' template" do
          put :update, id: @area, area: FactoryGirl.attributes_for(:invalid_area)
          expect(response).to render_template("edit")
        end
      end
    end

    describe "DELETE destroy" do

      it "destroys the requested user" do
        expect {
          delete :destroy, id: @area
        }.to change(Area, :count).by(-1)
      end

      it "redirects to the areas list" do
        delete :destroy, id: @area
        expect(response).to redirect_to(areas_url)
      end
    end
  end

  # shared_examples("guest access to areas") do
  #   describe "GET index" do
  #     it "should login" do
  #       get :index
  #       expect(response).to redirect_to "/users/sign_in"
  #     end
  #   end

  #   describe "GET show" do
  #     it "should login" do
  #       get :show, id: @area
  #       expect(response).to redirect_to "/users/sign_in"
  #     end
  #   end

  #   describe "GET new" do
  #     it "should login" do
  #       get :new
  #       expect(response).to redirect_to "/users/sign_in"
  #     end
  #   end

  #   describe "GET edit" do
  #     it "should login" do
  #       get :edit, id: @area
  #       expect(response).to redirect_to "/users/sign_in"
  #     end
  #   end

  #   describe "POST create" do
  #       it "should login" do
  #         post :create, area: FactoryGirl.attributes_for(:new_area)
  #         expect(response).to redirect_to "/users/sign_in"
  #       end
  #   end

  #   describe "PATCH update" do
  #       it "should login" do
  #         patch :update, id: @area, area: FactoryGirl.attributes_for(:area)
  #         expect(response).to redirect_to "/users/sign_in"
  #       end
  #   end

  #   describe "DELETE destroy" do
  #     it "should login" do
  #       delete :destroy, id: @area
  #       expect(response).to redirect_to "/users/sign_in"
  #     end
  #   end
  # end

  describe "admin access" do
    before :each do 
      @unit = FactoryGirl.create(:unit)
      @storage = FactoryGirl.create(:storage)
      @user = FactoryGirl.create(:user,email: "")
      @area = FactoryGirl.create(:area)
      @role = FactoryGirl.create(:role)
      sign_in @user
      session[:current_storage] = @area.storage
    end

    it_behaves_like "user/admin access to areas"
    
  end

  # describe "guess access" do
  #   before :each do 
  #     FactoryGirl.create(:unit)
  #     @user = FactoryGirl.create(:user)
  #     @superadmin = FactoryGirl.create(:superadmin)
  #     @unitadmin = FactoryGirl.create(:unitadmin)
  #   end

  #   it_behaves_like "guest access to areas"
  # end
end
